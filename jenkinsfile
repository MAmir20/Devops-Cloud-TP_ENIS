def EC2_PUBLIC_IP = ""
def RDS_ENDPOINT = ""
def DEPLOYER_KEY_URI = ""
pipeline {
    agent any
    environment {
            AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
            AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
            AWS_CREDENTIALS_ID = 'aws-credentials'
            ECR_REPO_URL = '682033493357.dkr.ecr.us-east-1.amazonaws.com'
            ECR_REPO_NAME = 'test'
            IMAGE_REPO = "${ECR_REPO_URL}/${ECR_REPO_NAME}"
            AWS_REGION = "us-east-1"

        }
    stages {
         stage('Provision Server and Database') {
             steps {
                 script {
                     dir('my-terraform-project/remote_backend') {
                         sh "terraform init"
                         // Apply Terraform configuration
                         sh "terraform apply --auto-approve"
                     }
                     dir('my-terraform-project') {
                         // Initialize Terraform
                         sh "terraform init"
                         sh "terraform plan -lock=false"

                         // Apply Terraform configuration
                         sh "terraform apply -lock=false --auto-approve"

                         // Get EC2 Public IP
                         EC2_PUBLIC_IP = sh(
                             script: 'terraform output instance_details | grep "instance_public_ip" | awk \'{print $3}\' | tr -d \'"\'',
                             returnStdout: true
                         ).trim()

                         // Get RDS Endpoint
                         RDS_ENDPOINT = sh(
                             script: 'terraform output rds_endpoint | grep "endpoint" | awk \'{print $3}\' | tr -d \'"\'',
                             returnStdout: true
                         ).trim()
                        DEPLOYER_KEY_URI = sh(
                             script: 'terraform output deployer_key_s3_uri | tr -d \'"\'',
                             returnStdout: true
                         ).trim()

                         // Debugging: Print captured values
                         echo "EC2 Public IP: ${EC2_PUBLIC_IP}"
                         echo "RDS Endpoint: ${RDS_ENDPOINT}"
                         echo "Deployer Key URI: ${DEPLOYER_KEY_URI}"
                     }
                 }
             }
         }
        stage('Update Frontend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/frontend/src') {
                        writeFile file: 'config.js', text: """
                        export const API_BASE_URL = 'http://${EC2_PUBLIC_IP}:8000';
                        """
                        sh '''
                        echo "Contents of config.js after update:"
                        cat config.js
                        '''
                    }
                }
            }
        }
        stage('Update Backend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/backend/backend') {
                        // Verify the existence of settings.py
                        sh '''
                        if [ -f "settings.py" ]; then
                            echo "Found settings.py at $(pwd)"
                        else
                            echo "settings.py not found in $(pwd)!"
                            exit 1
                        fi
                        '''

                        // Update the DB_HOST value in settings.py
                        sh """
                        sed -i "s|DB_HOST = .*|DB_HOST = '${RDS_ENDPOINT}'|g" settings.py
                        """

                        // Verify the DATABASES section after the update
                        sh '''
                        echo "DATABASES section of settings.py after update:"
                        sed -n '/DATABASES = {/,/^}/p' settings.py
                        '''
                    }
                }
            }
        }



//         stage('Clone Repository') {
//             steps {
//                 echo 'Cloning the repository...'
//                 git url: 'https://github.com/ReDXTechnologies/Devops-Cloud-TP_ENIS.git', branch: 'final'
//             }
//         }
        stage('Build Frontend Docker Image') {
                    steps {
                        dir('frontend') {
                            script {
                                echo 'Building Frontend Docker Image...'
                                def frontendImage = docker.build('frontend-app')
                                echo "Built Image: ${frontendImage.id}"
                            }
                        }
                    }
                }
        stage('Build Backend Docker Image') {
                    steps {
                        dir('backend') {
                            script {
                                echo 'Building Backend Docker Image...'
                                def backendImage = docker.build('backend-app')
                                echo "Built Image: ${backendImage.id}"
                            }
                        }
                    }
                }
        stage('Login to AWS ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'cd16bc80-8a23-4622-8c73-cf38e0e139d9']]) {
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 682033493357.dkr.ecr.us-east-1.amazonaws.com'
                }
            }
        }
         stage('Tag and Push Frontend Image') {
                    steps {
                        script {
                            echo 'Tagging and pushing Frontend Image...'
                            sh "docker tag frontend-app:latest $REPOSITORY_FRONTEND"
                            sh "docker push $REPOSITORY_FRONTEND"
                        }
                    }
                }
        stage('Tag and Push Backend Image') {
            steps {
                script {
                    echo 'Tagging and pushing Backend Image...'
                    sh "docker tag backend-app:latest $REPOSITORY_BACKEND"
                    sh "docker push $REPOSITORY_BACKEND"
                }
            }
        }
        stage('Download SSH Key from S3') {
            steps {
                script {
                        sh """
                        aws s3 cp s3://${S3_BUCKET_NAME}/${KEY_NAME} ${WORKSPACE}/${KEY_NAME}
                        # Set the proper permissions for the private key
                        chmod 600 ${WORKSPACE}/${KEY_NAME}
                        """
                }
            }
        }
        stage('Move Key to Ansible Directory') {
            steps {
                script {
                    sh """
                    # Ensure the Ansible keys directory exists
                    mkdir -p ansible/keys
                    # Move the downloaded key to the Ansible directory
                    mv ${WORKSPACE}/${KEY_NAME} ${ANSIBLE_KEY_PATH}
                    """
                }
            }
        }
    }
}



